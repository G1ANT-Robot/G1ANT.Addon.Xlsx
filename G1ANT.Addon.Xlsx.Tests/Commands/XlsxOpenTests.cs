/**
*    Copyright(C) G1ANT Ltd, All rights reserved
*    Solution G1ANT.Addon, Project G1ANT.Addon.Xlsx
*    www.g1ant.com
*
*    Licensed under the G1ANT license.
*    See License.txt file in the project root for full license information.
*
*/
using System;
using System.IO;

using G1ANT.Engine;
using NUnit.Framework;
using System.Reflection;
using G1ANT.Addon.Xlsx.Tests.Properties;
using G1ANT.Language;

namespace G1ANT.Addon.Xlsx.Tests
{
    [TestFixture]
    public class XlsxOpenTests
    {
        Scripter scripter;
        string file;
        [OneTimeSetUp]
        [Timeout(20000)]
        public void ClassInit()
        {
            Language.Addon addon = Language.Addon.Load(@"G1ANT.Addon.Xlsx.dll");
            Environment.CurrentDirectory = TestContext.CurrentContext.TestDirectory;
            file = Assembly.GetExecutingAssembly().UnpackResourceToFile("Resources." + nameof(Resources.XlsTestWorkbook), "xlsx");
            scripter = new Scripter();
            scripter.InitVariables.Clear();
        }
        
        [Test]
        [Timeout(20000)]
        public void XlsxFileOpenTest()
        {
            scripter.Text = $@"
            xlsx.open {SpecialChars.Text}{file}{SpecialChars.Text} result {SpecialChars.Variable}id
            ";
            scripter.Run();
            Assert.AreNotEqual(-1, scripter.Variables.GetVariableValue<int>("id"));
        }

        [Test]
        [Timeout(20000)]
        public void FileAccessModeTest()
        {
            scripter.Text = $@"
            xlsx.open {SpecialChars.Text}{file}{SpecialChars.Text} result {SpecialChars.Variable}id accessmode read
            xlsx.setvalue 123 row 1 colindex 1
            xlsx.close
            ";
            scripter.Run();

            Assert.AreNotEqual(-1, scripter.Variables.GetVariableValue<int>("id"));
            Assert.IsTrue(Initializer.AreEqual(File.ReadAllBytes(file), Properties.Resources.XlsTestWorkbook));

            System.Threading.Thread.Sleep(1000);

            scripter.Text = $@"
            xlsx.open {SpecialChars.Text}{file}{SpecialChars.Text} result {SpecialChars.Variable}id accessmode readwrite
            xlsx.setvalue 123 row 1 colindex 1
            xlsx.close
            ";
            scripter.Run();

            Assert.AreNotEqual(-1, scripter.Variables.GetVariableValue<int>("id"));
            Assert.IsFalse(Initializer.AreEqual(File.ReadAllBytes(file), Properties.Resources.XlsTestWorkbook));
        }

        [Test]
        [Timeout(20000)]
        public void IvalidAccessModeTest()
        {
            scripter.Text = ($"xlsx.open {SpecialChars.Text}{file}{SpecialChars.Text} accessmode abc123");
            Exception exception = Assert.Throws<ApplicationException>(delegate
            {
                scripter.Run();
            });
            Assert.IsInstanceOf<ArgumentOutOfRangeException>(exception.GetBaseException());

        }

        [Test]
        [Timeout(20000)]
        public void InvalidPathTest()
        {
            string path = @"c:\Not esxisting file.xlsx";
            if (File.Exists(path))
            {
                Assert.Inconclusive($"File '{path}' exist");
            }
            scripter.Text = $"xlsx.open {SpecialChars.Text}{path}{SpecialChars.Text} result {SpecialChars.Variable}id";
            Exception exception = Assert.Throws<ApplicationException>(delegate
            {
                scripter.Run();
            });
            Assert.IsInstanceOf<FileNotFoundException>(exception.GetBaseException());
        }

        [Test]
        [Timeout(20000)]
        public void InvalidPathFormatTest()
        {
            string path = @"!c:\\\!#^&.xls";
            scripter.Text = $"xlsx.open  {SpecialChars.Text}{path}{SpecialChars.Text} result {SpecialChars.Variable}id";
            Exception exception = Assert.Throws<ApplicationException>(delegate
            {
                scripter.Run();
            });
            Assert.IsInstanceOf<NotSupportedException>(exception.GetBaseException());

        }

        [Test]
        [Timeout(20000)]
        public void InvalidFormatTest()
        {
            string path = Path.Combine(System.Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "test file.xls");
            scripter.Text = $"xlsx.open  {SpecialChars.Text}{path}{SpecialChars.Text} result {SpecialChars.Variable}id";
            try
            {
                File.WriteAllText(path, "!@#$%^&*()");
                Exception exception = Assert.Throws<ApplicationException>(delegate
                {
                    scripter.Run();
                });
                Assert.IsInstanceOf<FileFormatException>(exception.GetBaseException());
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                if (File.Exists(path))
                {
                    File.Delete(path);
                }
            }
            if (File.Exists(path))
            {
                Assert.Inconclusive($"Test aborted becouse file '{path}' already exists.");
            }
        }
        
        [OneTimeTearDown]
        [Timeout(10000)]
        public void ClassCleanUp()
        {
            if (File.Exists(file))
            {
                File.Delete(file);
            }
        }
    }
}
